{"version":3,"file":"static/js/898.35379dad.chunk.js","mappings":"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","sources":["../node_modules/@web3auth/base-evm-adapter/src/baseEvmAdapter.ts","../../../src/index.ts","../node_modules/@web3auth/wallet-connect-v1-adapter/src/config.ts","../node_modules/@web3auth/wallet-connect-v1-adapter/src/walletConnectV1adapter.ts"],"sourcesContent":["import {\n  ADAPTER_STATUS,\n  BaseAdapter,\n  checkIfTokenIsExpired,\n  clearToken,\n  getSavedToken,\n  saveToken,\n  signChallenge,\n  UserAuthInfo,\n  verifySignedChallenge,\n  WalletLoginError,\n} from \"@web3auth/base\";\n\nexport abstract class BaseEvmAdapter<T> extends BaseAdapter<T> {\n  async authenticateUser(): Promise<UserAuthInfo> {\n    if (!this.provider || !this.chainConfig?.chainId) throw WalletLoginError.notConnectedError();\n\n    const { chainNamespace, chainId } = this.chainConfig;\n\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError(\"Not connected with wallet, Please login/connect first\");\n    const accounts = await this.provider.request<string[]>({\n      method: \"eth_accounts\",\n    });\n    if (accounts && accounts.length > 0) {\n      const existingToken = getSavedToken(accounts[0] as string, this.name);\n      if (existingToken) {\n        const isExpired = checkIfTokenIsExpired(existingToken);\n        if (!isExpired) {\n          return { idToken: existingToken };\n        }\n      }\n\n      const payload = {\n        domain: window.location.origin,\n        uri: window.location.href,\n        address: accounts[0],\n        chainId: parseInt(chainId, 16),\n        version: \"1\",\n        nonce: Math.random().toString(36).slice(2),\n        issuedAt: new Date().toISOString(),\n      };\n\n      const challenge = await signChallenge(payload, chainNamespace);\n\n      const signedMessage = await this.provider.request<string>({\n        method: \"personal_sign\",\n        params: [challenge, accounts[0]],\n      });\n\n      const idToken = await verifySignedChallenge(chainNamespace, signedMessage as string, challenge, this.name, this.sessionTime);\n      saveToken(accounts[0] as string, this.name, idToken);\n      return {\n        idToken,\n      };\n    }\n    throw WalletLoginError.notConnectedError(\"Not connected with wallet, Please login/connect first\");\n  }\n\n  async disconnect(): Promise<void> {\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.disconnectionError(\"Not connected with wallet\");\n    const accounts = await this.provider.request<string[]>({\n      method: \"eth_accounts\",\n    });\n    if (accounts && accounts.length > 0) {\n      clearToken(accounts[0], this.name);\n    }\n  }\n}\n",null,"import { CHAIN_NAMESPACES, IWalletConnectExtensionAdapter } from \"@web3auth/base\";\n\nexport const WALLET_CONNECT_EXTENSION_ADAPTERS: IWalletConnectExtensionAdapter[] = [\n  {\n    name: \"Rainbow\",\n    chains: [CHAIN_NAMESPACES.EIP155],\n    logo: \"https://images.web3auth.io/login-rainbow.svg\",\n    mobile: {\n      native: \"rainbow:\",\n      universal: \"https://rnbwapp.com\",\n    },\n    desktop: {\n      native: \"\",\n      universal: \"\",\n    },\n  },\n  {\n    name: \"MetaMask\",\n    chains: [CHAIN_NAMESPACES.EIP155],\n    logo: \"https://images.web3auth.io/login-metamask.svg\",\n    mobile: {\n      native: \"metamask:\",\n      universal: \"https://metamask.app.link\",\n    },\n    desktop: {\n      native: \"\",\n      universal: \"\",\n    },\n  },\n];\n","import WalletConnect from \"@walletconnect/client\";\nimport {\n  ADAPTER_CATEGORY,\n  ADAPTER_CATEGORY_TYPE,\n  ADAPTER_EVENTS,\n  ADAPTER_NAMESPACES,\n  ADAPTER_STATUS,\n  ADAPTER_STATUS_TYPE,\n  AdapterNamespaceType,\n  CHAIN_NAMESPACES,\n  ChainNamespaceType,\n  CONNECTED_EVENT_DATA,\n  CustomChainConfig,\n  getChainConfig,\n  log,\n  SafeEventEmitterProvider,\n  UserInfo,\n  WALLET_ADAPTERS,\n  WalletConnectV1Data,\n  WalletInitializationError,\n  WalletLoginError,\n  Web3AuthError,\n} from \"@web3auth/base\";\nimport { BaseEvmAdapter } from \"@web3auth/base-evm-adapter\";\nimport { WalletConnectProvider } from \"@web3auth/ethereum-provider\";\n\nimport { WALLET_CONNECT_EXTENSION_ADAPTERS } from \"./config\";\nimport { WalletConnectV1AdapterOptions } from \"./interface\";\n\nclass WalletConnectV1Adapter extends BaseEvmAdapter<void> {\n  readonly name: string = WALLET_ADAPTERS.WALLET_CONNECT_V1;\n\n  readonly adapterNamespace: AdapterNamespaceType = ADAPTER_NAMESPACES.EIP155;\n\n  readonly currentChainNamespace: ChainNamespaceType = CHAIN_NAMESPACES.EIP155;\n\n  readonly type: ADAPTER_CATEGORY_TYPE = ADAPTER_CATEGORY.EXTERNAL;\n\n  readonly adapterOptions: WalletConnectV1AdapterOptions;\n\n  public status: ADAPTER_STATUS_TYPE = ADAPTER_STATUS.NOT_READY;\n\n  public adapterData: WalletConnectV1Data = {\n    uri: \"\",\n    extensionAdapters: WALLET_CONNECT_EXTENSION_ADAPTERS,\n  };\n\n  public connector: WalletConnect | null = null;\n\n  private wcProvider: WalletConnectProvider | null = null;\n\n  private rehydrated = false;\n\n  constructor(options: WalletConnectV1AdapterOptions = {}) {\n    super();\n    this.adapterOptions = { ...options };\n    this.chainConfig = options.chainConfig || null;\n    this.sessionTime = options.sessionTime || 86400;\n  }\n\n  get connected(): boolean {\n    return !!this.connector?.connected;\n  }\n\n  get provider(): SafeEventEmitterProvider | null {\n    return this.wcProvider?.provider || null;\n  }\n\n  set provider(_: SafeEventEmitterProvider | null) {\n    throw new Error(\"Not implemented\");\n  }\n\n  async init(): Promise<void> {\n    super.checkInitializationRequirements();\n    if (!this.chainConfig) {\n      this.chainConfig = getChainConfig(CHAIN_NAMESPACES.EIP155, 1);\n    }\n    // Create a connector\n    this.connector = this.getWalletConnectInstance();\n    this.wcProvider = new WalletConnectProvider({ config: { chainConfig: this.chainConfig as CustomChainConfig }, connector: this.connector });\n\n    this.emit(ADAPTER_EVENTS.READY, WALLET_ADAPTERS.WALLET_CONNECT_V1);\n    this.status = ADAPTER_STATUS.READY;\n    log.debug(\"initializing wallet connect v1 adapter\");\n    if (this.connector.connected) {\n      this.rehydrated = true;\n      await this.onConnectHandler({ accounts: this.connector.accounts, chainId: this.connector.chainId });\n    }\n  }\n\n  async connect(): Promise<SafeEventEmitterProvider | null> {\n    super.checkConnectionRequirements();\n    if (!this.connector) throw WalletInitializationError.notReady(\"Wallet adapter is not ready yet\");\n\n    if (this.connected) {\n      await this.onConnectHandler({ accounts: this.connector.accounts, chainId: this.connector.chainId });\n      return this.provider;\n    }\n\n    if (this.status !== ADAPTER_STATUS.CONNECTING) {\n      // for wallet connect qr code modal we have to create a new connector, coz wallet connect internally does not open\n      // modal again on existing instance if connection is pending.\n      if (this.adapterOptions.adapterSettings?.qrcodeModal) {\n        this.connector = this.getWalletConnectInstance();\n        this.wcProvider = new WalletConnectProvider({\n          config: {\n            chainConfig: this.chainConfig as CustomChainConfig,\n            // network switching can be skipped with custom ui\n            skipLookupNetwork: this.adapterOptions.adapterSettings?.skipNetworkSwitching,\n          },\n          connector: this.connector,\n        });\n      }\n      await this.createNewSession();\n      this.status = ADAPTER_STATUS.CONNECTING;\n      this.emit(ADAPTER_EVENTS.CONNECTING, { adapter: WALLET_ADAPTERS.WALLET_CONNECT_V1 });\n    }\n    return new Promise((resolve, reject) => {\n      if (!this.connector) return reject(WalletInitializationError.notReady(\"Wallet adapter is not ready yet\"));\n      // for wallet connect default modal.\n      this.connector.on(\"modal_closed\", async () => {\n        this.status = ADAPTER_STATUS.READY;\n        this.emit(ADAPTER_EVENTS.READY, WALLET_ADAPTERS.WALLET_CONNECT_V1);\n        return reject(new Error(\"User closed modal\"));\n      });\n      try {\n        // Subscribe to session connection\n        this.connector.on(\"connect\", async (error: Error | null, payload: { params: { accounts: string[]; chainId: number }[] }) => {\n          if (error) {\n            this.emit(ADAPTER_EVENTS.ERRORED, error);\n          }\n          log.debug(\"connected event emitted by web3auth\");\n          await this.onConnectHandler(payload.params[0]);\n          return resolve(this.provider);\n        });\n      } catch (error: unknown) {\n        log.error(\"Wallet connect v1 adapter error while connecting\", error);\n        // ready again to be connected\n        this.status = ADAPTER_STATUS.READY;\n        this.rehydrated = true;\n        this.emit(ADAPTER_EVENTS.ERRORED, error);\n        reject(\n          error instanceof Web3AuthError\n            ? error\n            : WalletLoginError.connectionError(`Failed to login with wallet connect: ${(error as Error)?.message || \"\"}`)\n        );\n      }\n    });\n  }\n\n  setAdapterSettings(options: { sessionTime?: number }): void {\n    if (this.status === ADAPTER_STATUS.READY) return;\n    if (options?.sessionTime) {\n      this.sessionTime = options.sessionTime;\n    }\n  }\n\n  async getUserInfo(): Promise<Partial<UserInfo>> {\n    if (!this.connected) throw WalletLoginError.notConnectedError(\"Not connected with wallet, Please login/connect first\");\n    return {};\n  }\n\n  async disconnect(options: { cleanup: boolean } = { cleanup: false }): Promise<void> {\n    const { cleanup } = options;\n    if (!this.connector || !this.connected) throw WalletLoginError.notConnectedError(\"Not connected with wallet\");\n    await super.disconnect();\n    await this.connector.killSession();\n    this.rehydrated = false;\n    if (cleanup) {\n      this.connector = null;\n      this.status = ADAPTER_STATUS.NOT_READY;\n      this.wcProvider = null;\n    } else {\n      // ready to connect again\n      this.status = ADAPTER_STATUS.READY;\n    }\n    this.emit(ADAPTER_EVENTS.DISCONNECTED);\n  }\n\n  private async addChain(chainConfig: CustomChainConfig): Promise<void> {\n    try {\n      if (!this.wcProvider) throw WalletInitializationError.notReady(\"Wallet adapter is not ready yet\");\n      const networkSwitch = this.adapterOptions.adapterSettings?.networkSwitchModal;\n      if (networkSwitch) {\n        await networkSwitch.addNetwork({ chainConfig, appOrigin: window.location.hostname });\n      }\n      await this.wcProvider.addChain(chainConfig);\n    } catch (error) {\n      log.error(error);\n    }\n  }\n\n  private async switchChain(connectedChainConfig: Partial<CustomChainConfig>, chainConfig: CustomChainConfig): Promise<void> {\n    if (!this.wcProvider) throw WalletInitializationError.notReady(\"Wallet adapter is not ready yet\");\n    const networkSwitch = this.adapterOptions.adapterSettings?.networkSwitchModal;\n\n    if (networkSwitch) {\n      await networkSwitch.switchNetwork({\n        currentChainConfig: chainConfig,\n        newChainConfig: connectedChainConfig,\n        appOrigin: window.location.hostname,\n      });\n    }\n    await this.wcProvider.switchChain({ chainId: chainConfig.chainId, lookup: false, addChain: false });\n  }\n\n  private async createNewSession(opts: { forceNewSession: boolean } = { forceNewSession: false }): Promise<void> {\n    if (!this.connector) throw WalletInitializationError.notReady(\"Wallet adapter is not ready yet\");\n    if (opts.forceNewSession && this.connector.pending) {\n      await this.connector.killSession();\n    }\n    // for wallet connect qr modal\n    if (this.adapterOptions?.adapterSettings?.qrcodeModal) {\n      await this.connector.createSession({ chainId: parseInt(this.chainConfig?.chainId || \"0x1\", 16) });\n      return;\n    }\n\n    // for web3auth qr code modal\n    return new Promise<void>((resolve, reject) => {\n      if (!this.connector) return reject(WalletInitializationError.notReady(\"Wallet adapter is not ready yet\"));\n      log.debug(\"creating new session for web3auth wallet connect\");\n      this.connector.on(\"display_uri\", async (err, payload) => {\n        if (err) {\n          this.emit(ADAPTER_EVENTS.ERRORED, WalletLoginError.connectionError(\"Failed to display wallet connect qr code\"));\n          return reject(err);\n        }\n        const uri = payload.params[0];\n        this.updateAdapterData({ uri, extensionAdapters: WALLET_CONNECT_EXTENSION_ADAPTERS } as WalletConnectV1Data);\n\n        this.connector?.off(\"display_uri\");\n        return resolve();\n      });\n\n      this.connector.createSession({ chainId: parseInt(this.chainConfig?.chainId || \"0x1\", 16) }).catch((error) => {\n        log.error(\"error while creating new wallet connect session\", error);\n        this.emit(ADAPTER_EVENTS.ERRORED, error);\n        return reject(error);\n      });\n    });\n  }\n\n  private async onConnectHandler(params: { accounts: string[]; chainId: number }) {\n    if (!this.connector || !this.wcProvider) throw WalletInitializationError.notReady(\"Wallet adapter is not ready yet\");\n    if (!this.chainConfig) throw WalletInitializationError.invalidParams(\"Chain config is not set\");\n\n    const { chainId } = params;\n    log.debug(\"connected chainId in hex\");\n    if (chainId !== parseInt(this.chainConfig.chainId, 16)) {\n      const connectedChainConfig = getChainConfig(CHAIN_NAMESPACES.EIP155, chainId) || {\n        chainId: `0x${chainId.toString(16)}`,\n        displayName: \"Unknown Network\",\n      };\n\n      const isCustomUi = this.adapterOptions.adapterSettings?.qrcodeModal;\n      // skipping network is not allowed in default ui. We are use network switching modal for default ui.\n      if (!isCustomUi || (isCustomUi && !this.adapterOptions?.adapterSettings?.skipNetworkSwitching)) {\n        try {\n          await this.addChain(this.chainConfig);\n          await this.switchChain(connectedChainConfig, this.chainConfig);\n          this.connector = this.getWalletConnectInstance();\n        } catch (error) {\n          log.error(\"error while chain switching\", error);\n          // we need to create a new session since old session is already used and\n          // user needs to login again with correct chain with new qr code.\n          await this.createNewSession({ forceNewSession: true });\n          this.emit(\n            ADAPTER_EVENTS.ERRORED,\n            WalletInitializationError.fromCode(\n              5000,\n              `Not connected to correct network. Expected: ${this.chainConfig.displayName}, Current: ${\n                connectedChainConfig?.displayName || chainId\n              }, Please switch to correct network from wallet`\n            )\n          );\n          this.status = ADAPTER_STATUS.READY;\n          this.rehydrated = true;\n          return;\n        }\n      }\n    }\n    await this.wcProvider.setupProvider(this.connector);\n    this.subscribeEvents(this.connector);\n    this.status = ADAPTER_STATUS.CONNECTED;\n    this.emit(ADAPTER_EVENTS.CONNECTED, { adapter: WALLET_ADAPTERS.WALLET_CONNECT_V1, reconnected: this.rehydrated } as CONNECTED_EVENT_DATA);\n  }\n\n  private subscribeEvents(connector: WalletConnect): void {\n    connector.on(\"session_update\", async (error: Error | null) => {\n      if (error) {\n        this.emit(ADAPTER_EVENTS.ERRORED, error);\n      }\n    });\n  }\n\n  private getWalletConnectInstance(): WalletConnect {\n    const walletConnectOptions = this.adapterOptions.adapterSettings || {};\n    walletConnectOptions.bridge = walletConnectOptions.bridge || \"https://bridge.walletconnect.org\";\n    // Create a connector\n    return new WalletConnect(walletConnectOptions);\n  }\n}\n\nexport { WalletConnectV1Adapter };\n"],"names":["BaseEvmAdapter","this","provider","chainConfig","_this$chainConfig","chainId","WalletLoginError","chainNamespace","status","ADAPTER_STATUS","request","method","accounts","length","existingToken","getSavedToken","name","checkIfTokenIsExpired","idToken","payload","domain","window","location","origin","uri","href","address","parseInt","version","nonce","Math","random","toString","slice","issuedAt","Date","toISOString","signChallenge","challenge","params","signedMessage","verifySignedChallenge","sessionTime","saveToken","clearToken","BaseAdapter","connectorOpts","pushServerOpts","cryptoLib","Connector","WALLET_CONNECT_EXTENSION_ADAPTERS","chains","CHAIN_NAMESPACES","logo","mobile","native","universal","desktop","WalletConnectV1Adapter","constructor","options","_defineProperty","WALLET_ADAPTERS","ADAPTER_NAMESPACES","ADAPTER_CATEGORY","extensionAdapters","adapterOptions","connector","connected","wcProvider","_","Error","getChainConfig","getWalletConnectInstance","WalletConnectProvider","config","emit","ADAPTER_EVENTS","log","rehydrated","onConnectHandler","WalletInitializationError","adapterSettings","qrcodeModal","skipLookupNetwork","_this$adapterOptions$2","skipNetworkSwitching","createNewSession","adapter","Promise","resolve","reject","on","error","Web3AuthError","message","setAdapterSettings","cleanup","killSession","networkSwitch","_this$adapterOptions$3","networkSwitchModal","addNetwork","appOrigin","hostname","addChain","connectedChainConfig","_this$adapterOptions$4","switchNetwork","currentChainConfig","newChainConfig","switchChain","lookup","opts","forceNewSession","pending","createSession","err","updateAdapterData","off","catch","displayName","isCustomUi","_this$adapterOptions2","_this$adapterOptions3","setupProvider","subscribeEvents","reconnected","walletConnectOptions","bridge","WalletConnect"],"sourceRoot":""}