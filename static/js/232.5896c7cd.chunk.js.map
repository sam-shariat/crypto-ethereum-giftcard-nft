{"version":3,"file":"static/js/232.5896c7cd.chunk.js","mappings":"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","sources":["../node_modules/@web3auth/openlogin-adapter/src/config.ts","../node_modules/@web3auth/openlogin-adapter/src/openloginAdapter.ts"],"sourcesContent":["import { OPENLOGIN_NETWORK, UX_MODE } from \"@toruslabs/openlogin\";\nimport { ChainNamespaceType, getChainConfig } from \"@web3auth/base\";\n\nimport { OpenloginAdapterOptions } from \"./interface\";\n\nexport const getOpenloginDefaultOptions = (chainNamespace?: ChainNamespaceType, chainId?: number | string): OpenloginAdapterOptions => {\n  return {\n    adapterSettings: {\n      network: OPENLOGIN_NETWORK.MAINNET,\n      clientId: \"\",\n      uxMode: UX_MODE.POPUP,\n    },\n    chainConfig: chainNamespace ? getChainConfig(chainNamespace, chainId) : null,\n    loginSettings: {},\n  };\n};\n","import OpenLogin, { getHashQueryParams, LoginParams, OPENLOGIN_NETWORK, OpenLoginOptions, SUPPORTED_KEY_CURVES, UX_MODE } from \"@toruslabs/openlogin\";\nimport {\n  ADAPTER_CATEGORY,\n  ADAPTER_CATEGORY_TYPE,\n  ADAPTER_EVENTS,\n  ADAPTER_NAMESPACES,\n  ADAPTER_STATUS,\n  ADAPTER_STATUS_TYPE,\n  AdapterInitOptions,\n  AdapterNamespaceType,\n  BaseAdapter,\n  CHAIN_NAMESPACES,\n  ChainNamespaceType,\n  CONNECTED_EVENT_DATA,\n  CustomChainConfig,\n  log,\n  SafeEventEmitterProvider,\n  UserInfo,\n  WALLET_ADAPTERS,\n  WalletInitializationError,\n  WalletLoginError,\n} from \"@web3auth/base\";\nimport { CommonPrivateKeyProvider, IBaseProvider } from \"@web3auth/base-provider\";\nimport merge from \"lodash.merge\";\n\nimport { getOpenloginDefaultOptions } from \"./config\";\nimport type { LoginSettings, OpenloginAdapterOptions } from \"./interface\";\n\nexport type OpenloginLoginParams = LoginParams & {\n  // to maintain backward compatibility\n  login_hint?: string;\n};\n\ntype PrivateKeyProvider = IBaseProvider<string>;\n\nexport class OpenloginAdapter extends BaseAdapter<OpenloginLoginParams> {\n  readonly name: string = WALLET_ADAPTERS.OPENLOGIN;\n\n  readonly adapterNamespace: AdapterNamespaceType = ADAPTER_NAMESPACES.MULTICHAIN;\n\n  readonly type: ADAPTER_CATEGORY_TYPE = ADAPTER_CATEGORY.IN_APP;\n\n  public openloginInstance: OpenLogin | null = null;\n\n  public status: ADAPTER_STATUS_TYPE = ADAPTER_STATUS.NOT_READY;\n\n  public currentChainNamespace: ChainNamespaceType = CHAIN_NAMESPACES.EIP155;\n\n  private openloginOptions: OpenLoginOptions;\n\n  private loginSettings: LoginSettings = {};\n\n  private privKeyProvider: PrivateKeyProvider | null = null;\n\n  constructor(params: OpenloginAdapterOptions) {\n    super();\n    log.debug(\"const openlogin adapter\", params);\n    const defaultOptions = getOpenloginDefaultOptions(params.chainConfig?.chainNamespace, params.chainConfig?.chainId);\n    this.openloginOptions = {\n      clientId: \"\",\n      network: OPENLOGIN_NETWORK.MAINNET,\n      ...defaultOptions.adapterSettings,\n      ...(params.adapterSettings || {}),\n    };\n    this.loginSettings = { ...defaultOptions.loginSettings, ...params.loginSettings };\n    this.sessionTime = this.loginSettings.sessionTime || 86400;\n    // if no chainNamespace is passed then chain config should be set before calling init\n    if (params.chainConfig?.chainNamespace) {\n      this.currentChainNamespace = params.chainConfig?.chainNamespace;\n      const defaultChainIdConfig = defaultOptions.chainConfig ? defaultOptions.chainConfig : {};\n      this.chainConfig = { ...defaultChainIdConfig, ...params?.chainConfig };\n      log.debug(\"const openlogin chainConfig\", this.chainConfig);\n      if (!this.chainConfig.rpcTarget && params.chainConfig.chainNamespace !== CHAIN_NAMESPACES.OTHER) {\n        throw WalletInitializationError.invalidParams(\"rpcTarget is required in chainConfig\");\n      }\n    }\n  }\n\n  get chainConfigProxy(): CustomChainConfig | null {\n    return this.chainConfig ? { ...this.chainConfig } : null;\n  }\n\n  get provider(): SafeEventEmitterProvider | null {\n    return this.privKeyProvider?.provider || null;\n  }\n\n  set provider(_: SafeEventEmitterProvider | null) {\n    throw new Error(\"Not implemented\");\n  }\n\n  async init(options: AdapterInitOptions): Promise<void> {\n    super.checkInitializationRequirements();\n    if (!this.openloginOptions?.clientId) throw WalletInitializationError.invalidParams(\"clientId is required before openlogin's initialization\");\n    if (!this.chainConfig) throw WalletInitializationError.invalidParams(\"chainConfig is required before initialization\");\n    let isRedirectResult = false;\n\n    if (this.openloginOptions.uxMode === UX_MODE.REDIRECT) {\n      const redirectResult = getHashQueryParams();\n      if (Object.keys(redirectResult).length > 0 && redirectResult._pid) {\n        isRedirectResult = true;\n      }\n    }\n    this.openloginOptions = {\n      ...this.openloginOptions,\n      replaceUrlOnRedirect: isRedirectResult,\n    };\n    this.openloginInstance = new OpenLogin(this.openloginOptions);\n    log.debug(\"initializing openlogin adapter init\");\n\n    await this.openloginInstance.init();\n\n    this.status = ADAPTER_STATUS.READY;\n    this.emit(ADAPTER_EVENTS.READY, WALLET_ADAPTERS.OPENLOGIN);\n\n    try {\n      log.debug(\"initializing openlogin adapter\");\n      // connect only if it is redirect result or if connect (adapter is cached/already connected in same session) is true\n      if (this.openloginInstance.privKey && (options.autoConnect || isRedirectResult)) {\n        await this.connect();\n      }\n    } catch (error) {\n      log.error(\"Failed to connect with cached openlogin provider\", error);\n      this.emit(\"ERRORED\", error);\n    }\n  }\n\n  async connect(params?: OpenloginLoginParams): Promise<SafeEventEmitterProvider | null> {\n    super.checkConnectionRequirements();\n    this.status = ADAPTER_STATUS.CONNECTING;\n    this.emit(ADAPTER_EVENTS.CONNECTING, { ...params, adapter: WALLET_ADAPTERS.OPENLOGIN });\n    try {\n      await this.connectWithProvider(params);\n      return this.provider;\n    } catch (error: unknown) {\n      log.error(\"Failed to connect with openlogin provider\", error);\n      // ready again to be connected\n      this.status = ADAPTER_STATUS.READY;\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n      if ((error as Error)?.message.includes(\"user closed popup\")) {\n        throw WalletLoginError.popupClosed();\n      }\n      throw WalletLoginError.connectionError(\"Failed to login with openlogin\");\n    }\n  }\n\n  async disconnect(options: { cleanup: boolean } = { cleanup: false }): Promise<void> {\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError(\"Not connected with wallet\");\n    if (!this.openloginInstance) throw WalletInitializationError.notReady(\"openloginInstance is not ready\");\n    await this.openloginInstance.logout();\n    if (options.cleanup) {\n      this.status = ADAPTER_STATUS.NOT_READY;\n      this.openloginInstance = null;\n      this.privKeyProvider = null;\n    } else {\n      // ready to be connected again\n      this.status = ADAPTER_STATUS.READY;\n    }\n\n    this.emit(ADAPTER_EVENTS.DISCONNECTED);\n  }\n\n  async authenticateUser(): Promise<{ idToken: string }> {\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError(\"Not connected with wallet, Please login/connect first\");\n    const userInfo = await this.getUserInfo();\n    return {\n      idToken: userInfo.idToken as string,\n    };\n  }\n\n  async getUserInfo(): Promise<Partial<UserInfo>> {\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError(\"Not connected with wallet\");\n    if (!this.openloginInstance) throw WalletInitializationError.notReady(\"openloginInstance is not ready\");\n    const userInfo = await this.openloginInstance.getUserInfo();\n    return userInfo;\n  }\n\n  // should be called only before initialization.\n  setAdapterSettings(adapterSettings: OpenLoginOptions & { sessionTime: number }): void {\n    if (this.status === ADAPTER_STATUS.READY) return;\n    const defaultOptions = getOpenloginDefaultOptions();\n    this.openloginOptions = { ...defaultOptions.adapterSettings, ...(this.openloginOptions || {}), ...adapterSettings };\n    if (adapterSettings.sessionTime) {\n      this.loginSettings = { ...this.loginSettings, sessionTime: adapterSettings.sessionTime };\n    }\n  }\n\n  // should be called only before initialization.\n  setChainConfig(customChainConfig: CustomChainConfig): void {\n    super.setChainConfig(customChainConfig);\n    this.currentChainNamespace = customChainConfig.chainNamespace;\n  }\n\n  private async connectWithProvider(params?: OpenloginLoginParams): Promise<void> {\n    if (!this.chainConfig) throw WalletInitializationError.invalidParams(\"chainConfig is required before initialization\");\n    if (!this.openloginInstance) throw WalletInitializationError.notReady(\"openloginInstance is not ready\");\n\n    if (this.currentChainNamespace === CHAIN_NAMESPACES.SOLANA) {\n      const { SolanaPrivateKeyProvider } = await import(\"@web3auth/solana-provider\");\n      this.privKeyProvider = new SolanaPrivateKeyProvider({ config: { chainConfig: this.chainConfig } });\n    } else if (this.currentChainNamespace === CHAIN_NAMESPACES.EIP155) {\n      const { EthereumPrivateKeyProvider } = await import(\"@web3auth/ethereum-provider\");\n      this.privKeyProvider = new EthereumPrivateKeyProvider({ config: { chainConfig: this.chainConfig } });\n    } else if (this.currentChainNamespace === CHAIN_NAMESPACES.OTHER) {\n      this.privKeyProvider = new CommonPrivateKeyProvider();\n    } else {\n      throw new Error(`Invalid chainNamespace: ${this.currentChainNamespace} found while connecting to wallet`);\n    }\n    // if not logged in then login\n    if (!this.openloginInstance.privKey && params) {\n      if (!this.loginSettings.curve) {\n        this.loginSettings.curve =\n          this.currentChainNamespace === CHAIN_NAMESPACES.SOLANA ? SUPPORTED_KEY_CURVES.ED25519 : SUPPORTED_KEY_CURVES.SECP256K1;\n      }\n      await this.openloginInstance.login(\n        merge(\n          this.loginSettings,\n          { loginProvider: params.loginProvider },\n          { extraLoginOptions: { ...(params.extraLoginOptions || {}), login_hint: params.login_hint || params.extraLoginOptions?.login_hint } }\n        )\n      );\n    }\n    let finalPrivKey = this.openloginInstance.privKey;\n    if (finalPrivKey) {\n      if (this.currentChainNamespace === CHAIN_NAMESPACES.SOLANA) {\n        const { getED25519Key } = await import(\"@toruslabs/openlogin-ed25519\");\n        finalPrivKey = getED25519Key(finalPrivKey).sk.toString(\"hex\");\n      }\n      await this.privKeyProvider.setupProvider(finalPrivKey);\n      this.status = ADAPTER_STATUS.CONNECTED;\n      this.emit(ADAPTER_EVENTS.CONNECTED, { adapter: WALLET_ADAPTERS.OPENLOGIN, reconnected: !params } as CONNECTED_EVENT_DATA);\n    }\n  }\n}\n"],"names":["getOpenloginDefaultOptions","chainNamespace","chainId","adapterSettings","network","OPENLOGIN_NETWORK","clientId","uxMode","UX_MODE","chainConfig","getChainConfig","loginSettings","OpenloginAdapter","constructor","params","_defineProperty","WALLET_ADAPTERS","ADAPTER_NAMESPACES","ADAPTER_CATEGORY","ADAPTER_STATUS","CHAIN_NAMESPACES","log","defaultOptions","_params$chainConfig","openloginOptions","sessionTime","currentChainNamespace","_params$chainConfig4","defaultChainIdConfig","rpcTarget","WalletInitializationError","this","provider","privKeyProvider","_","Error","options","_this$openloginOption","isRedirectResult","redirectResult","getHashQueryParams","Object","keys","length","_pid","_objectSpread","replaceUrlOnRedirect","openloginInstance","OpenLogin","init","status","emit","ADAPTER_EVENTS","privKey","autoConnect","connect","adapter","connectWithProvider","error","message","includes","WalletLoginError","cleanup","logout","getUserInfo","userInfo","idToken","setAdapterSettings","setChainConfig","customChainConfig","SolanaPrivateKeyProvider","config","EthereumPrivateKeyProvider","CommonPrivateKeyProvider","curve","SUPPORTED_KEY_CURVES","login","merge","loginProvider","extraLoginOptions","login_hint","finalPrivKey","getED25519Key","sk","toString","setupProvider","reconnected","BaseAdapter"],"sourceRoot":""}